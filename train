import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.simplefilter("ignore")


waterpotability = pd.read_csv("water_potability.csv")

# Check the data load
#waterpotability.head()


#waterpotability.info()


sns.heatmap(waterpotability.corr(), annot=True)
plt.figure(figsize=(12, 8))
sns.pairplot(data=waterpotability, hue='Potability')
waterpotability['ph'] = waterpotability['ph'].fillna(waterpotability.groupby('Potability')['ph'].transform('mean'))
waterpotability['Sulfate'] = waterpotability['Sulfate'].fillna(waterpotability.groupby('Potability')['Sulfate'].transform('mean'))
waterpotability['Trihalomethanes'] = waterpotability['Trihalomethanes'].fillna(waterpotability.groupby('Potability')['Trihalomethanes'].transform('mean'))

#waterpotability.isna().sum()
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = waterpotability.drop(labels=['Potability'], axis=1)
y = waterpotability['Potability']
from sklearn.feature_selection import mutual_info_regression
#print(mutual_info_regression(X,y,random_state=420))

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=0)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, classification_report, f1_score, accuracy_score
from catboost import CatBoostClassifier

etc = CatBoostClassifier(iterations=100,random_state=42,verbose=1,task_type="GPU", max_depth=6)#75iter 300nest (n_estimators=300,max_depth=4,learning_rate=0.3,random_seed=0
etc2=CatBoostClassifier(iterations=75,max_depth=4,learning_rate=0.3,random_state=42)#75iter
#t=CatBoostClassifier()
etc2.fit(X_train,y_train)
etc.fit(X_train,y_train)
#print(etc.best_params_)
model=RandomForestClassifier(random_state=0,n_estimators=400,criterion='gini',bootstrap=True)
model.fit(X_train, y_train)
#print(model.best_params_)

import pickle
with open('model.pkl','wb') as f:
    pickle.dump(model,f)
from sklearn.metrics import *
prediction = model.predict(X_test)
pred_train=model.predict(X_train)
from termcolor import colored
print(f'Accuracy_score:{accuracy_score(y_test,prediction)}')
print(f'Accuracy_score:{accuracy_score(y_train,pred_train)}\n')
print(f'f1 score:{f1_score(y_test,prediction)}')
print(f'f1 score:{f1_score(y_train,pred_train)}\n')

#print(f'jaccard_score:{jaccard_score(y_test,prediction)}')
#print(f'jaccard_score:{jaccard_score(y_train,pred_train)}')
print(f'precision_score:{precision_score(y_test,prediction)}')
print(f'precision_score:{precision_score(y_train,pred_train)}\n')
print(f'recall_score:{recall_score(y_test,prediction)}')
print(f'recall_score:{recall_score(y_train,pred_train)}\n\n\n')
print('rf')
prediction2=etc.predict(X_test)
pred_train2=etc.predict(X_train)
print(f'Accuracy_score:{accuracy_score(y_test,prediction2)}')
print(f'Accuracy_score:{accuracy_score(y_train,pred_train2)}\n')
print(f'f1 score:{f1_score(y_test,prediction2)}')
print(f'f1 score:{f1_score(y_train,pred_train2)}\n')

#print(f'jaccard_score:{jaccard_score(y_test,prediction2)}')
#print(f'jaccard_score:{jaccard_score(y_train,pred_train2)}')
print(f'precision_score:{precision_score(y_test,prediction2)}')
print(f'precision_score:{precision_score(y_train,pred_train2)}\n')
print(f'recall_score:{recall_score(y_test,prediction2)}')
print(f'recall_score:{recall_score(y_train,pred_train2)}\n\n\n')
#print(f'zero_one_loss:{zero_one_loss(y_test,prediction2)}')
#print(f'zero_one_loss:{zero_one_loss(y_train,pred_train2)}')
#print(f'r2_score:{r2_score(y_test,prediction2)}')
#print(f'r2_score:{r2_score(y_train,pred_train2)}')
print('et')

#rs101-78 rs420-79 rs0-0.81


from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from sklearn.ensemble import StackingClassifier
estimators = [
    ('rf', model),
     ('etc', etc)
]
from sklearn.linear_model import LogisticRegression


ensem = StackingClassifier(
    estimators=estimators,final_estimator=CatBoostClassifier(iterations=100,random_state=42,verbose=1,task_type="GPU", max_depth=6)
)
ensem.fit(X_train,y_train)
prediction3=ensem.predict(X_test)
pred_train3=ensem.predict(X_train)
print(f'Accuracy_score:{accuracy_score(y_test,prediction3)} ENSEMBLE MODEL')
print(f'Accuracy_score:{accuracy_score(y_train,pred_train3)}\n')
print(f'f1 score:{f1_score(y_test,prediction3)}')
print(f'f1 score:{f1_score(y_train,pred_train3)}\n')

#print(f'jaccard_score:{jaccard_score(y_test,prediction3)}')
#print(f'jaccard_score:{jaccard_score(y_train,pred_train3)}')
print(f'precision_score:{precision_score(y_test,prediction3)}')
print(f'precision_score:{precision_score(y_train,pred_train3)}\n')
print(f'recall_score:{recall_score(y_test,prediction3)}')
print(f'recall_score:{recall_score(y_train,pred_train3)}\n\n\n')
print('ensemble')

#print(etc.best_params_)
