import numpy as np
import pandas as pd

data=pd.read_csv('water_potability.csv')

#print(data)
Y=data['Potability']
X=data
X_early=data
#print(X)
X.drop(columns=['Potability'],inplace=True)
#Y=data['Potability']



from sklearn.feature_selection import mutual_info_classif
from sklearn.feature_selection import mutual_info_regression


Copy_temp=X['ph'].dropna()
X['ph']=X['ph'].fillna(Copy_temp.values.mean())
Copy_temp=X['Sulfate'].dropna()
X['Sulfate']=X['Sulfate'].fillna(Copy_temp.values.mean())
Copy_temp=X['Trihalomethanes'].dropna()
X['Trihalomethanes']=X['Trihalomethanes'].fillna(Copy_temp.values.mean())


print(mutual_info_regression(X,Y,random_state=420))
def make_mi_scores(x, y):
    #x.reshape(-1,1)
    x=x.values.reshape(-1,1)
    mi_scores=mutual_info_regression(x,y)
    return mi_scores

cols=X.columns

#print(cols[0])

#print(X)
'''
scores=[]
print(make_mi_scores(X['ph'],Y))
scores.append(make_mi_scores(X['ph'],Y))
print(make_mi_scores(X['Hardness'],Y))
scores.append(make_mi_scores(X['Hardness'],Y))
print(make_mi_scores(X['Solids'],Y))
scores.append(make_mi_scores(X['Solids'],Y))
print(make_mi_scores(X['Chloramines'],Y)) #0
scores.append(make_mi_scores(X['Chloramines'],Y))
print(make_mi_scores(X['Sulfate'],Y))#0
scores.append(make_mi_scores(X['Sulfate'],Y))
print(make_mi_scores(X['Conductivity'],Y))
scores.append(make_mi_scores(X['Conductivity'],Y))
print(make_mi_scores(X['Organic_carbon'],Y))
scores.append(make_mi_scores(X['Organic_carbon'],Y))
print(make_mi_scores(X['Trihalomethanes'],Y)) #0
scores.append(make_mi_scores(X['Trihalomethanes'],Y))
print(make_mi_scores(X['Turbidity'],Y))
scores.append(make_mi_scores(X['Turbidity'],Y))'''

#ph 0.08 | hardness 0.26 | solids 0.001 | chloramines,sulfate 0 | conductivity 0.007 | organic_poop 0.004 | trihalo 0 | turbina 0.03

from sklearn.model_selection import train_test_split
#print(X_early)
#print(Y)

#X_early.drop(columns=['Chloramines','Sulfate','Trihalomethanes'],inplace=True)
print(X_early.isna().sum())
X_train, X_test, y_train, y_test = train_test_split(X_early, Y.values, test_size=0.33, random_state=420)

#print(X_train,y_train)

import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats

cols=['ph','Hardness','Solids','Conductivity','Organic_carbon','Turbidity']
'''
def norm(arr):
    arr = stats.boxcox(arr)
    return arr

#print(X_train.columns)

for i in range(6):
    print(X_train[cols[i]].values)
    norm(X_train[cols[i]].values)
'''

plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True)

#X_train['ph']=np.log1p(X_train['ph'])
X_train['Solids']=X_train['Solids']-X_train['Solids'].mean()
sns.distplot(X_train['Solids'].values)
#sns.distplot(normalized_data)
plt.show()






from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import catboost
from catboost import CatBoostClassifier

lr=CatBoostClassifier(n_estimators=1000)
lr.fit(X_train,y_train)

import pickle
with open('model.pkl','wb') as f:
    pickle.dump(lr,f)

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import sklearn
#from sklearn.metrics import accuracy_score
from sklearn.metrics import *
prediction=lr.predict(X_test)
pred_train=lr.predict(X_train)
print(f'Accuracy_score:{accuracy_score(y_test,prediction)}')
print(f'Accuracy_score:{accuracy_score(y_train,pred_train)}')
print(f'f1 score:{f1_score(y_test,prediction)}')
print(f'f1 score:{f1_score(y_train,pred_train)}')
print(f'hamming_loss:{hamming_loss(y_test,prediction)}')
print(f'hamming_loss:{hamming_loss(y_train,pred_train)}')
print(f'jaccard_score:{jaccard_score(y_test,prediction)}')
print(f'jaccard_score:{jaccard_score(y_train,pred_train)}')
print(f'precision_score:{precision_score(y_test,prediction)}')
print(f'precision_score:{precision_score(y_train,pred_train)}')
print(f'recall_score:{recall_score(y_test,prediction)}')
print(f'recall_score:{recall_score(y_train,pred_train)}')
print(f'zero_one_loss:{zero_one_loss(y_test,prediction)}')
print(f'zero_one_loss:{zero_one_loss(y_train,pred_train)}')
print(f'r2_score:{r2_score(y_test,prediction)}')
print(f'r2_score:{r2_score(y_train,pred_train)}')
